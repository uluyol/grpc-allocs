// automatically generated by the FlatBuffers compiler, do not modify

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Resp struct {
	_tab flatbuffers.Table
}

func GetRootAsResp(buf []byte, offset flatbuffers.UOffsetT) *Resp {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Resp{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Resp) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Resp) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Resp) Succ() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Resp) MutateSucc(n byte) bool {
	return rcv._tab.MutateByteSlot(4, n)
}

func (rcv *Resp) F1(obj *F1) *F1 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(F1)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Resp) F2(obj *F2) *F2 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(F2)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func RespStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func RespAddSucc(builder *flatbuffers.Builder, succ byte) {
	builder.PrependByteSlot(0, succ, 0)
}
func RespAddF1(builder *flatbuffers.Builder, f1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(f1), 0)
}
func RespAddF2(builder *flatbuffers.Builder, f2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(f2), 0)
}
func RespEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
