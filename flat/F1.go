// automatically generated by the FlatBuffers compiler, do not modify

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type F1 struct {
	_tab flatbuffers.Table
}

func GetRootAsF1(buf []byte, offset flatbuffers.UOffsetT) *F1 {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &F1{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *F1) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *F1) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *F1) Seq() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *F1) MutateSeq(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *F1) Data(j int) int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *F1) DataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func F1Start(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func F1AddSeq(builder *flatbuffers.Builder, seq int64) {
	builder.PrependInt64Slot(0, seq, 0)
}
func F1AddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(data), 0)
}
func F1StartDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func F1End(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
